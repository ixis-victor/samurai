<?php
/**
 * @file
 * security_samurai_gitapi.module
 */

/**
 * Implements hook_libraries_info()
 */
function security_samurai_libraries_info() {

  $info = array();

  $info['codebase'] = array(
    'name' => 'Codebase PHP wrapper',
    'vendor url' => 'https://github.com',
    'download url' => 'https://github.com/jkswoods/codebase/archive/master.zip',
    'files' => array(
      'php' => array(
        'codebase.php'
      ),
    ),
  );

  return $info;
}

/**
 * Implements hook_entity_info()
 */
function security_samurai_gitapi_entity_info() {

  $info = array();

  // The gitinfo entity.
  $info['gitinfo'] = array(
    'label' => t('Git info'),
    'base table' => 'securitysamurai_gitinfo',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'name',
    ),
    'uri callback' => 'entity_class_uri',
    'entity class' => 'Entity',
    'controller class' => 'GitInfoEntityController',
    'module' => 'security_samurai_gitapi',
    // Default views support.
    'views controller class' => 'EntityDefaultViewsController',
  );

  return $info;
}

/**
 * Extends the EntityAPIController class for the 'site' entity type
 *
 * @method object save()
 * @method object buildContent()
 */
class GitInfoEntityController extends EntityAPIController {
  /**
   * Override the default save function to 
   */
  public function save($entity, DatabaseTransaction $transaction = NULL) {

    if (isset($entity->is_new)) {
      $entity->created_at = REQUEST_TIME;
    }
    $entity->updated_at = REQUEST_TIME;
    return parent::save($entity, $transaction);
  }

  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {

    $build = parent::buildContent($entity, $view_mode, $langcode, $content);
    return $build;
  }
}

/**
 * Implements hook_load
 *
 * Menu autoloader for site/%site
 */
function gitinfo_load($id) {

  $site = entity_load('gitinfo', array($id));
  return array_pop($site);
}

/**
 * Implements hook_menu
 */
function security_samurai_gitapi_menu() {

  $items = array();

  // The GitAPI configuration page.
  $items['admin/config/development/gitapi'] = array(
    'title' => 'Git API configuration',
    'description' => 'Configure accounts for connecting private repositories',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('security_samurai_gitapi_admin_config_form'),
    'access arguments' => array('administer samurai gitapi'),
    'file' => 'security_samurai_gitapi.admin.inc',
  );

  // Return menu items
  return $items;
}

/**
 * Implements hook_permission()
 */
function security_samurai_gitapi_permission() {

  return array(
    'administer samurai gitapi' => array(
      'title' => t('Administer security samurai GitAPI'),
      'description' => t('Perform administration tasks for security samurai GitAPI.'),
    ),
  );
}

/**
 * Client form step 3
 */
function client_site_form_step_3($form, $form_state) {

  // Container for the GitAPI elements.
  $form['gitapi_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Git repository information'),
    '#description' => t('Set up git branches, clone URLs and tagging per client here.'),
    '#fieldset_icon' => 'info_outline',
    '#collapsed' => FALSE,
  );
  // The Git service.
  if (isset($form_state['values']['gitapi_service'])) {
    $service_default = $form_state['values']['gitapi_service'];
  } else {
    $service_default = 3;
  }
  $form['gitapi_fieldset']['gitapi_service'] = array(
    '#type' => 'select',
    '#title' => t('Service'),
    '#description' => t('The Git service to use.'),
    '#options' => array(
      0 => t('- Please select one -'),
      1 => t('GitHub'),
      2 => t('BitBucket'),
      3 => t('Codebase'),
    ),
    '#default_value' => $service_default,
  );
  // The repo clone URL.
  if (isset($form_state['values']['gitapi_clone_url'])) {
    $clone_default = $form_state['values']['gitapi_clone_url'];
  } else {
    $clone_default = '';
  }
  $form['gitapi_fieldset']['gitapi_clone_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Clone URL'),
    '#description' => t('The Git URL to the repo containing the site.'),
    '#default_value' => $clone_default,
  );
  // Makefile
  if (isset($form_state['values']['gitapi_makefile'])) {
    $makefile_default = $form_state['values']['gitapi_makefile'];
  } else {
    $makefile_default = '';
  }
  $form['gitapi_fieldset']['gitapi_makefile'] = array(
    '#type' => 'checkbox',
    '#title' => t('This project depends on a makefile?'),
    '#description' => t('Only select this option if the site set up is based primarily on running a makefile.'),
    '#default_value' => $makefile_default,
  );
  // Makefile location
  if (isset($form_state['values']['gitapi_makefile_location'])) {
    $makefile_location_default = $form_state['values']['gitapi_makefile_location'];
  } else {
    $makefile_location_default = '';
  }
  $form['gitapi_fieldset']['gitapi_makefile_location'] = array(
    '#type' => 'textfield',
    '#title' => t('Makefile location and name'),
    '#description' => t('The name and location of the makefile to run e.g. some-folder/another-folder/samurai.make'),
    '#attributes' => array(
      'placeholder' => 'make/samurai.make',
    ),
    '#default_value' => $makefile_location_default,
  );
  // Git flow model help
  $form['gitapi_fieldset']['gitapi_workflow'] = array(
    '#type' => 'markup',
    '#markup' => 'Ensure your repository is using the Git flow model.
      <a style="text-decoration: underline;" target="_blank" href="http://danielkummer.github.io/git-flow-cheatsheet/">See here for more information</a>.',
  );
  // Form back button.
  $form['form_back'] = array(
    '#type' => 'submit',
    '#value' => 'Back',
  );
  // Form submit button.
  $form['form_next'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );

  return $form;
}

/**
 * Form validation handler for the GitAPI step of the client_form
 */
function client_site_form_step_3_validate($form, $form_state) {

  // Check a Git service has been selected.
  if ($form_state['values']['gitapi_service'] == 0) {
    return form_set_error('gitapi_service', t('Select a Git service'));
  }

  // Bitbucket and Github integration currently not complete
  if ($form_state['values']['gitapi_service'] == 1 ||
    $form_state['values']['gitapi_service'] == 2) {
    return form_set_error('gitapi_service', t('This git service option is currently disabled, select another'));
  }

}

/**
 * Form submit handler for the GitAPI step of the client_form
 */
function client_site_form_submit_details_step_3($form, $form_state) {


}

function get_branches() {

  // TEMP
  return array(
    0 => 'test',
  );
}
