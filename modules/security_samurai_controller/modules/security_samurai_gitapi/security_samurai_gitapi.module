<?php
/**
 * @file
 * security_samurai_gitapi.module
 */

$gitapipath = drupal_get_path('module', 'security_samurai_gitapi');
define('SECURITY_SAMURAI_GITAPI_PATH', $gitapipath);

/**
 * Implements hook_entity_info
 */
function security_samurai_gitapi_entity_info() {

  $info = array();

  // The gitinfo entity.
  $info['gitinfo'] = array(
    'label' => t('Git info'),
    'base table' => 'securitysamurai_gitinfo',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'name',
    ),
    'uri callback' => 'entity_class_uri',
    'entity class' => 'Entity',
    'controller class' => 'GitInfoEntityController',
    'module' => 'security_samurai_gitapi',
    // Default views support.
    'views controller class' => 'EntityDefaultViewsController',
  );

  return $info;
}

/**
 * Extends the EntityAPIController class for the 'site' entity type
 *
 * @method object save()
 * @method object buildContent()
 */
class GitInfoEntityController extends EntityAPIController {
  /**
   * Override the default save function to 
   */
  public function save($entity, DatabaseTransaction $transaction = NULL) {

    if (isset($entity->is_new)) {
      $entity->created_at = REQUEST_TIME;
    }
    $entity->updated_at = REQUEST_TIME;
    return parent::save($entity, $transaction);
  }

  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {

    $build = parent::buildContent($entity, $view_mode, $langcode, $content);
    return $build;
  }
}

/**
 * Implements hook_load
 *
 * Menu autoloader for site/%site
 */
function gitinfo_load($id) {

  $site = entity_load('gitinfo', array($id));
  return array_pop($site);
}

/**
 * Implements hook_menu
 */
function security_samurai_gitapi_menu() {

  $items = array();

  // The GitAPI configuration page.
  $items['admin/config/development/gitapi'] = array(
    'title' => 'Git API configuration',
    'description' => 'Configure accounts for connecting private repositories',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('security_samurai_gitapi_admin_config_form'),
    'access arguments' => array('administer samurai gitapi'),
    'file' => 'security_samurai_gitapi.admin.inc',
  );

  // Return menu items
  return $items;
}

/**
 * Implements hook_permission()
 */
function security_samurai_gitapi_permission() {

  return array(
    'administer samurai gitapi' => array(
      'title' => t('Administer security samurai GitAPI'),
      'description' => t('Perform administration tasks for security samurai GitAPI.'),
    ),
  );
}

/**
 * Client form step 3
 */
function client_site_form_step_3($form, $form_state) {
  
    if (empty($form_state['current_step'])) {
      $form_state['current_step'] = 1;
    }

    $form['security_samurai_gitapi_fieldset'] = array(
      '#type' => 'fieldset',
      '#title' => t('Git configuration'),
      '#description' => t('Set up git branches, clone URLs and tagging per client here.'),
      '#fieldset_icon' => 'code',
      '#collapsed' => FALSE,
    );
    $form['security_samurai_gitapi_fieldset']['security_samurai_gitapi_service'] = array(
      '#type' => 'select',
      '#title' => t('Service'),
      '#description' => t('The Git service to use.'),
      '#options' => array(
        1 => t('GitHub'),
        2 => t('BitBucket'),
        3 => t('Codebase'),
      ),
    );
    $form['security_samurai_gitapi_fieldset']['security_samurai_gitapi_clone_url'] = array(
      '#type' => 'textfield',
      '#title' => t('Clone URL'),
      '#description' => t('The Git URL to the repo containing the site.'),
    );
    $form['security_samurai_gitapi_fieldset']['security_samurai_gitapi_branch_fieldset'] = array(
      '#type' => 'fieldset',
      '#title' => t('Git workflow'),
      '#description' => t('The workflow you define here can be custom to each site. The steps are followed top to bottom.'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#fieldset_icon' => 'group_work',
      '#attributes' => array(
        'class' => array('flatten'),
      ),
    );
    $form['security_samurai_gitapi_fieldset']['security_samurai_gitapi_branch_fieldset']['security_samurai_gitapi_model'] = array(
      '#type' => 'select',
      '#title' => t('Add step'),
      '#options' => array(
        0 => '- Add a step to the Git workflow -',
        1 => 'Create a new Samurai branch from an existing branch',
        2 => 'Check out to an existing branch',
        3 => 'Merge an existing branch in to an existing branch',
        4 => 'Merge the Samurai branch in to an existing branch',
        5 => 'Run security updates and tests',
        6 => 'Delete the samurai branch',
        7 => 'Commit changes to the Samurai branch',
        8 => 'Commit changes to an existing branch',
      ),
    );
    $form['#attached']['js'] = array(
      drupal_get_path('module', 'security_samurai_gitapi') . '/security_samurai_gitapi.js',
    );
    $form['form_back'] = array(
      '#type' => 'submit',
      '#value' => 'Back'
    );
    $form['form_next'] = array(
      '#type' => 'submit',
      '#value' => 'Submit',
    );

    return $form;
}

/**
 * Form validation handler for the GitAPI step of the client_form
 */
function client_site_form_step_3_validate($form, $form_state) {

}

/**
 * Form submit handler for the GitAPI step of the client_form
 */
function client_site_form_submit_details_step_3($form, $form_state) {

}