<?php
/**
 * @file
 * security_samurai_docker.install
 */

/**
 * Implements hook_schema()
 */
function security_samurai_docker_schema() {
	
	$schema = array();

	// Schema for Docker images
	$schema['securitysamurai_dockerimages'] = array(
		'description' => 'Security samurai docker image information',
		'fields' => array(
			'id' => array(
				'description' => 'Primary key of the image.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
			),
			'image_name' => array(
				'description' => 'Human-readable name of the docker container',
				'type' => 'varchar',
				'length' => 255,
				'not null' => FALSE,
			),
			'image_id' => array(
				'description' => 'The ID of the image.',
				'type' => 'varchar',
				'length' => 255,
				'not null' => FALSE,
			),
			'creation_date' => array(
				'decsription' => 'The creation date of the image',
				'type' => 'int',
				'length' => 10,
				'not null' => TRUE,
			),
		),
    'primary key' => array('id'),
	);

	// Schema for Docker containers
	$schema['securitysamurai_dockercontainers'] = array(
		'description' => 'Security samurai docker container information',
		'fields' => array(
			'id' => array(
				'description' => 'Primary key of the container.',
				'type' => 'serial',
				'unsigned' => TRUE,
				'not null' => TRUE,
			),
			'container_id' => array(
				'description' => 'The id of the container.',
				'type' => 'varchar',
				'length' => 255,
				'not null' => FALSE,
			),
			'image_name' => array(
				'description' => 'The name of the image.',
				'type' => 'varchar',
				'length' => 255,
				'not null' => FALSE,
			),
			'assigned_ports' => array(
				'description' => 'The assigned ports the container has in JSON format.',
				'type' => 'varchar',
				'length' => 255,
				'not null' => FALSE,
			),
			'status' => array(
				'description' => 'The status of the container. UP or DOWN.',
				'type' => 'int',
				'length' => 10,
				'not null' => TRUE,
			),
			'creation_date' => array(
				'description' => 'The creation date of the container',
				'type' => 'int',
				'length' => 10,
				'not null' => TRUE,
			),
		),
    'primary key' => array('id'),
	);

	// Schema for bridge between sites and containers
	//   The idea of this table is so that in future sites can be prioritised
	// 	 and containers downloaded if an error is picked up during the  
	$schema['securitysamurai_dockersites'] = array(
		'description' => 'The bridge between security samurai sites and docker',
		'fields' => array(
      'id' => array(
        'description' => 'The field ID',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
			'container_id' => array(
				'description' => 'The container ID.',
				'type' => 'varchar',
				'length' => 255,
				'not null' => TRUE,
			),
			'image_id' => array(
				'description' => 'The image ID.',
				'type' => 'varchar',
				'length' => 255,
				'not null' => TRUE,
			),
			'site_id' => array(
				'description' => 'The corresponding site ID within securitysamurai_site.',
				'type' => 'varchar',
				'length' => 255,
				'not null' => TRUE,
			),
		),
    'primary key' => array('id'),
	);

	return $schema;
}