<?php
/**
 * @file
 * security_samurai_gitapi.module
 */

/**
 * Implements hook_entity_info()
 */
function security_samurai_gitapi_entity_info() {

  $info = array();

  // The gitinfo entity.
  $info['gitinfo'] = array(
    'label' => t('Git info'),
    'base table' => 'securitysamurai_gitinfo',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'name',
    ),
    'uri callback' => 'entity_class_uri',
    'entity class' => 'Entity',
    'controller class' => 'GitInfoEntityController',
    'module' => 'security_samurai_gitapi',
    // Default views support.
    'views controller class' => 'EntityDefaultViewsController',
  );

  return $info;
}

function security_samurai_gitapi_cron() {

  // Refresh the branches
}

/**
 * Extends the EntityAPIController class for the 'gitinfo' entity type
 *
 * @method object buildContent()
 */
class GitInfoEntityController extends EntityAPIController {

  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {

    $build = parent::buildContent($entity, $view_mode, $langcode, $content);
    return $build;
  }
}

/**
 * Implements hook_load
 *
 * Menu autoloader for site/%site
 */
function gitinfo_load($id) {

  $site = entity_load('gitinfo', array($id));
  return array_pop($site);
}

/**
 * Implements hook_menu
 */
function security_samurai_gitapi_menu() {

  $items = array();

  // The GitAPI configuration page.
  $items['admin/config/development/gitapi'] = array(
    'title' => 'Git API configuration',
    'description' => 'Configure accounts for connecting private repositories',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('security_samurai_gitapi_admin_config_form'),
    'access arguments' => array('administer samurai gitapi'),
    'file' => 'security_samurai_gitapi.admin.inc',
  );

  // Return menu items
  return $items;
}

/**
 * Implements hook_permission()
 */
function security_samurai_gitapi_permission() {

  return array(
    'administer samurai gitapi' => array(
      'title' => t('Administer security samurai GitAPI'),
      'description' => t('Perform administration tasks for security samurai GitAPI.'),
    ),
  );
}

/**
 * Client form step 3
 */
function client_site_form_step_3($form, $form_state) {

  // Load the gitinfo entity if one exists.
  $site_id = arg(3);
  $gitinfo = NULL;
  if (gitinfo_exists($site_id)) {

    $gitinfo_id = gitinfo_getid($site_id);
    if ($gitinfo_id != FALSE) {

      $gitinfo = gitinfo_load($gitinfo_id);
    }
  }

  // Container for the GitAPI elements.
  $form['gitapi_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Git repository information'),
    '#description' => t('Set up git branches, clone URLs and tagging per client here.'),
    '#fieldset_icon' => 'info_outline',
    '#collapsed' => FALSE,
  );
  // The Git service.
  if (isset($form_state['values']['gitapi_service'])) {
    $service_default = $form_state['values']['gitapi_service'];
  } elseif (!is_null($gitinfo)) {
    $service_default = $gitinfo->service;
  } else {
    $service_default = 3;
  }
  $form['gitapi_fieldset']['gitapi_service'] = array(
    '#type' => 'select',
    '#title' => t('Service'),
    '#description' => t('The Git service to use.'),
    '#options' => array(
      0 => t('- Please select one -'),
      1 => t('GitHub'),
      2 => t('BitBucket'),
      3 => t('Codebase'),
    ),
    '#default_value' => $service_default,
  );
  // The repo clone URL.
  if (isset($form_state['values']['gitapi_clone_url'])) {
    $clone_default = $form_state['values']['gitapi_clone_url'];
  } elseif (!is_null($gitinfo)) {
    $clone_default = $gitinfo->clone_url;
  } else {
    $clone_default = '';
  }
  $form['gitapi_fieldset']['gitapi_clone_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Clone URL'),
    '#description' => t('The Git URL to the repo containing the site.'),
    '#default_value' => $clone_default,
    '#required' => TRUE,
  );
  // Makefile
  if (isset($form_state['values']['gitapi_makefile'])) {
    $makefile_default = $form_state['values']['gitapi_makefile'];
  } elseif (!is_null($gitinfo)) {
    $makefile_default = $gitinfo->is_make;
  } else {
    $makefile_default = '';
  }
  $form['gitapi_fieldset']['gitapi_makefile'] = array(
    '#type' => 'checkbox',
    '#title' => t('This project depends on a makefile?'),
    '#description' => t('Only select this option if the site set up is based primarily on running a makefile.'),
    '#default_value' => $makefile_default,
  );
  // Makefile location
  if (isset($form_state['values']['gitapi_makefile_location'])) {
    $makefile_location_default = $form_state['values']['gitapi_makefile_location'];
  } elseif (!is_null($gitinfo)) {
    $makefile_location_default = $gitinfo->make_location;
  } else {
    $makefile_location_default = '';
  }
  $form['gitapi_fieldset']['gitapi_makefile_location'] = array(
    '#type' => 'textfield',
    '#title' => t('Makefile location and name'),
    '#description' => t('The name and location of the makefile to run e.g. some-folder/another-folder/samurai.make'),
    '#attributes' => array(
      'placeholder' => 'make/samurai.make',
    ),
    '#default_value' => $makefile_location_default,
  );
  // Git flow model help
  $form['gitapi_fieldset']['gitapi_workflow'] = array(
    '#type' => 'markup',
    '#markup' => 'Ensure your repository is using the Git flow model.
      <a style="text-decoration: underline;" target="_blank" href="http://danielkummer.github.io/git-flow-cheatsheet/">See here for more information</a>.',
  );
  // Form back button.
  $form['form_back'] = array(
    '#type' => 'submit',
    '#value' => 'Back',
  );
  // Form submit button.
  $form['form_next'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );

  return $form;
}

/**
 * Form validation handler for the GitAPI step of the client_form
 */
function client_site_form_step_3_validate($form, $form_state) {

  // Check a Git service has been selected.
  if ($form_state['values']['gitapi_service'] == 0) {
    return form_set_error('gitapi_service', t('Select a Git service'));
  }

  // Bitbucket and Github integration currently not complete
  if ($form_state['values']['gitapi_service'] == 1 ||
    $form_state['values']['gitapi_service'] == 2) {
    return form_set_error('gitapi_service', t('This git service option is currently disabled, select another'));
  }

  // Check makefile location is set, if makefile selected
  if ($form_state['values']['gitapi_makefile'] == TRUE &&
   !isset($form_state['values']['gitapi_makefile_location'])) {
    return form_set_error('gitapi_makefile_location', t('The makefile location is required'));
  }
}

/**
 * Form submit handler for the GitAPI step of the client_form
 */
function client_site_form_submit_details_step_3($form, $form_state) {

  // Attempt to retrieve the branches associated with the Git repo
  $branches = '';
  try {
    // Retrieve branches
    $branches = drupal_json_encode(get_branches($form_state['values']['gitapi_service'], $form_state['values']['gitapi_clone_url']));
  } catch (Exception $e) {
    watchdog_log('Security samurai GitAPI', '<pre>' . print_r($e) . '</pre>');
    drupal_set_message('An error occurred during the process of retrieving available branches for the repository. It is recommended that you recache the branches later, on the site management page', 'error');
    $branches = drupal_json_encode(array());
  }

  // Check if the gitinfo already exists.
  $site_id = arg(3);
  if (gitinfo_exists($site_id)) {

    // Update the gitinfo entity.
    $gitinfo_id = gitinfo_getid($site_id);
    if ($gitinfo_id != FALSE) {

      // Load and update each of the values of the gitinfo entity.
      $gitinfo = gitinfo_load($gitinfo_id);
      $gitinfo->name = parse_repo_name($form_state['values']['gitapi_clone_url']);
      $gitinfo->service = $form_state['values']['gitapi_service'];
      $gitinfo->clone_url = $form_state['values']['gitapi_clone_url'];
      $gitinfo->branches = $branches;
      $gitinfo->is_make = $form_state['values']['gitapi_makefile'];
      $gitinfo->make_location = $form_state['values']['gitapi_makefile_location'];
      $gitinfo->save();
    }
  } else {

    // Create the gitinfo entity.
    $gitinfo = entity_create('gitinfo', array(
      'site' => samurai_get_site_id($form_state['multistep_values']['client_site_form_step_1']['name']),
      'name' => parse_repo_name($form_state['values']['gitapi_clone_url']), // repo name
      'service' => $form_state['values']['gitapi_service'],
      'clone_url' => $form_state['values']['gitapi_clone_url'],
      'branches' => $branches,
      'is_make' => $form_state['values']['gitapi_makefile'],
      'make_location' => $form_state['values']['gitapi_makefile_location'],
    ));

    $gitinfo_wrapper = entity_metadata_wrapper('gitinfo', $gitinfo);
    $gitinfo_wrapper->save();
  }
}

/**
 * Get all of the branches for a single repo
 *
 * @param string $service The git service.
 * @param string $clone_url The git clone url.
 */
function get_branches($service, $clone_url) {

  switch($service) {

    case 1:
      // GitHub
      break;
    case 2:
      // BitBucket
      break;
    case 3:

      // Codebase
      $user_account = variable_get('security_samurai_gitapi_codebase_user', NULL);
      $encrypted_key = variable_get('security_samurai_gitapi_codebase_api_key', NULL);

      $key = '';
      if (!is_null($encrypted_key)) {
        $key = decrypt($encrypted_key);
      } else {
        return FALSE;
      }

      $user_account = explode('/', $user_account);

      $account = $user_account[0];
      $auth_user = $user_account[1];

      // Initialise the Codebase class.
      $codebase = new Codebase();
      $codebase->setAccount($account);
      $codebase->setAuthentication($auth_user, $key);

      // Retrieve the project and repo name
      $project_n_repo = parse_repo_name($clone_url);

      // Retrieve all of the available branches as an XML
      $branches_raw = $codebase->get('/' . $project_n_repo . '/branches');

      $branches = array();
      foreach ($branches_raw->document->branch as $branch => $b) {
        $branches[] = (string)$b->name;
      }

      return $branches;
      break;
  }
}

/**
 * Parse the clone url to get the repo name
 *
 * The first part of the returned string will be the project name...
 * The second part of the returned string will be the repo name...
 *
 * @param string $clone_url The git clone url.
 */
function parse_repo_name($clone_url) {

  // Get the start and end of the string.
  $start = strpos($clone_url, '/') + 1;
  $end = strpos($clone_url, '.', $start);
  $length = $end - $start;

  // Retrieve the repo name.
  $project_n_repo = substr($clone_url, $start, $length);

  return $project_n_repo;
}

/**
 * Add an ssh key to the linked user account
 *
 * @param string $ssh_key The key string.
 * @param string $key_desc The name to give the key.
 * @param int $service The Git service.
 */
function gitapi_addsshkey($ssh_key, $key_desc, $service) {

  // Switch the service
  switch ($service) {
    case 1:
      // Github
      break;
    case 2:
      // Bitbucket
      break;
    case 3:

      // Codebase
      $user_account = variable_get('security_samruai_gitapi_codebase_user', NULL);
      $encrypted_key = variable_get('security_samurai_gitapi_codebase_api_key', NULL);

      $key = '';
      if (!is_null($encrypted_key)) {
        $key = decrypt($encrypted_key);
      } else {
        return FALSE;
      }

      $user_account = explode('/', $user_account);

      $account = $user_account[0];
      $auth_user = $user_account[1];

      // Initialise the Codebase class.
      $codebase = new Codebase();
      $codebase->setAccount($account);
      $codebase->setAuthentication($auth_user, $key);

      // Create the XML
      $ssh_key = new SimpleXMLElement('<public-key></public-key>');
      $ssh_key->addChild('description', $key_desc);
      $ssh_key->addChild('key', $ssh_key);

      // Send the request
      $codebase->post('/users/jkswoods/public_keys', $ssh_key->asXml());

      break;
  }
}

/**
 * Remove an ssh key from the linked user account
 *
 * @param string $ssh_key The key string.
 * @param string $key_desc The name given to the key.
 * @param int $service The Git service.
 */
function gitapi_removesshkey($ssh_key, $key_desc, $service) {

  // Switch the service
  switch ($service) {
    case 1:
      // Github
      break;
    case 2:
      // Bitbucket
      break;
    case 3:
      // Codebase
      // Currently the ability to remove ssh keys from a user account is
      // not available.
      break;
  }
}

/**
 * Returns the branches that are attached to the gitinfo entity
 *
 * @param int $site_id The ID of the site.
 */
function gitinfo_branches($site_id) {

  // Query the database for the branches.
  $result = db_query('SELECT branches FROM securitysamurai_gitinfo
    WHERE site = :site_id',
    array(
      ':site_id' => $site_id,
    ))->fetchField();

  if (!empty($result)) {

    // Return the result as an array.
    return drupal_json_decode($result);
  } else {

    return FALSE;
  }
}

/**
 * Check if the gitinfo already exists
 *
 * @param int $site_id The ID of the site
 */
function gitinfo_exists($site_id) {

  // Query the database for an existing gitinfo entry.
  $result = db_query('SELECT id FROM securitysamurai_gitinfo
    WHERE site = :site_id',
    array(
      ':site_id' => $site_id,
    ))->fetchField();

  if (!empty($result)) {

    // The result is not empty return TRUE.
    return TRUE;
  } else {

    return FALSE;
  }
}

/**
 * Retrieve the ID of the gitinfo entity from a site ID.
 *
 * @param int $site_id The ID of the site.
 */
function gitinfo_getid($site_id) {

  // Query the database.
  $result = db_query('SELECT id FROM securitysamurai_gitinfo
    WHERE site = :site_id',
    array(
      ':site_id' => $site_id,
    ))->fetchField();

  if (!empty($result)) {

    return $result;
  } else {

    return FALSE;
  }
}
