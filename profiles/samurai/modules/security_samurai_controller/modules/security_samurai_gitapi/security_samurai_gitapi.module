<?php
/**
 * @file
 * security_samurai_gitapi.module
 */

/**
 * Implements hook_entity_info()
 */
function security_samurai_gitapi_entity_info() {

  $info = array();

  // The gitinfo entity.
  $info['gitinfo'] = array(
    'label' => t('Git info'),
    'base table' => 'securitysamurai_gitinfo',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'name',
    ),
    'uri callback' => 'entity_class_uri',
    'entity class' => 'Entity',
    'controller class' => 'GitInfoEntityController',
    'module' => 'security_samurai_gitapi',
    // Default views support.
    'views controller class' => 'EntityDefaultViewsController',
  );

  return $info;
}

/**
 * Implements hook_cron
 */
function security_samurai_gitapi_cron() {

  // Refresh the branches
}

/**
 * Extends the EntityAPIController class for the 'gitinfo' entity type
 *
 * @method object buildContent()
 */
class GitInfoEntityController extends EntityAPIController {

  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {

    $build = parent::buildContent($entity, $view_mode, $langcode, $content);
    return $build;
  }
}

/**
 * Implements hook_load
 *
 * Menu autoloader for site/%site
 */
function gitinfo_load($id) {

  $site = entity_load('gitinfo', array($id));
  return array_pop($site);
}

/**
 * Implements hook_menu
 */
function security_samurai_gitapi_menu() {

  $items = array();

  // The GitAPI configuration page.
  $items['admin/config/development/gitapi'] = array(
    'title' => 'Git API configuration',
    'description' => 'Configure accounts for connecting private repositories',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('security_samurai_gitapi_admin_config_form'),
    'access arguments' => array('administer samurai gitapi'),
    'file' => 'security_samurai_gitapi.admin.inc',
  );

  // Return menu items
  return $items;
}

/**
 * Implements hook_permission()
 */
function security_samurai_gitapi_permission() {

  return array(
    'administer samurai gitapi' => array(
      'title' => t('Administer security samurai GitAPI'),
      'description' => t('Perform administration tasks for security samurai GitAPI.'),
    ),
  );
}

/**
 * Get all of the branches for a single repo
 *
 * @param string $service The git service.
 * @param string $clone_url The git clone url.
 */
function get_branches($service, $clone_url) {

  switch($service) {

    case 1:
      // GitHub
      break;
    case 2:
      // BitBucket
      break;
    case 3:

      // Codebase
      $user_account = variable_get('security_samurai_gitapi_codebase_user', NULL);
      $encrypted_key = variable_get('security_samurai_gitapi_codebase_api_key', NULL);

      $key = '';
      if (!is_null($encrypted_key)) {
        $key = decrypt($encrypted_key);
      } else {
        return FALSE;
      }

      $user_account = explode('/', $user_account);

      $account = $user_account[0];
      $auth_user = $user_account[1];

      // Initialise the Codebase class.
      $codebase = new Codebase();
      $codebase->setAccount($account);
      $codebase->setAuthentication($auth_user, $key);

      // Retrieve the project and repo name
      $project_n_repo = parse_repo_name($clone_url);

      // Retrieve all of the available branches as an XML
      $branches_raw = $codebase->get('/' . $project_n_repo . '/branches');

      $branches = array();
      foreach ($branches_raw->document->branch as $branch => $b) {
        $branches[] = (string)$b->name;
      }

      return $branches;
      break;
  }
}

/**
 * Parse the clone url to get the repo name
 *
 * The first part of the returned string will be the project name...
 * The second part of the returned string will be the repo name...
 *
 * @param string $clone_url The git clone url.
 */
function parse_repo_name($clone_url) {

  // Get the start and end of the string.
  $start = strpos($clone_url, '/') + 1;
  $end = strpos($clone_url, '.', $start);
  $length = $end - $start;

  // Retrieve the repo name.
  $project_n_repo = substr($clone_url, $start, $length);

  return $project_n_repo;
}

/**
 * Add an ssh key to the linked user account
 *
 * @param string $ssh_key The key string.
 * @param string $key_desc The name to give the key.
 * @param int $service The Git service.
 */
function gitapi_addsshkey($ssh_key, $key_desc, $service) {

  // Switch the service
  switch ($service) {
    case 1:
      // Github
      break;
    case 2:
      // Bitbucket
      break;
    case 3:

      // Codebase
      $user_account = variable_get('security_samruai_gitapi_codebase_user', NULL);
      $encrypted_key = variable_get('security_samurai_gitapi_codebase_api_key', NULL);

      $key = '';
      if (!is_null($encrypted_key)) {
        $key = decrypt($encrypted_key);
      } else {
        return FALSE;
      }

      $user_account = explode('/', $user_account);

      $account = $user_account[0];
      $auth_user = $user_account[1];

      // Initialise the Codebase class.
      $codebase = new Codebase();
      $codebase->setAccount($account);
      $codebase->setAuthentication($auth_user, $key);

      // Create the XML
      $ssh_key = new SimpleXMLElement('<public-key></public-key>');
      $ssh_key->addChild('description', $key_desc);
      $ssh_key->addChild('key', $ssh_key);

      // Send the request
      $codebase->post('/users/jkswoods/public_keys', $ssh_key->asXml());

      break;
  }
}

/**
 * Remove an ssh key from the linked user account
 *
 * @param string $ssh_key The key string.
 * @param string $key_desc The name given to the key.
 * @param int $service The Git service.
 */
function gitapi_removesshkey($ssh_key, $key_desc, $service) {

  // Switch the service
  switch ($service) {
    case 1:
      // Github
      break;
    case 2:
      // Bitbucket
      break;
    case 3:
      // Codebase
      // Currently the ability to remove ssh keys from a user account is
      // not available.
      break;
  }
}

/**
 * Returns the branches that are attached to the gitinfo entity
 *
 * @param int $site_id The ID of the site.
 */
function gitinfo_branches($site_id) {

  // Query the database for the branches.
  $result = db_query('SELECT branches FROM securitysamurai_gitinfo
    WHERE site = :site_id',
    array(
      ':site_id' => $site_id,
    ))->fetchField();

  if (!empty($result)) {

    // Return the result as an array.
    return drupal_json_decode($result);
  } else {

    return FALSE;
  }
}

/**
 * Check if the gitinfo already exists
 *
 * @param int $site_id The ID of the site
 */
function gitinfo_exists($site_id) {

  // Query the database for an existing gitinfo entry.
  $result = db_query('SELECT id FROM securitysamurai_gitinfo
    WHERE site = :site_id',
    array(
      ':site_id' => $site_id,
    ))->fetchField();

  if (!empty($result)) {

    // The result is not empty return TRUE.
    return TRUE;
  } else {

    return FALSE;
  }
}

/**
 * Retrieve the ID of the gitinfo entity from a site ID.
 *
 * @param int $site_id The ID of the site.
 */
function gitinfo_getid($site_id) {

  // Query the database.
  $result = db_query('SELECT id FROM securitysamurai_gitinfo
    WHERE site = :site_id',
    array(
      ':site_id' => $site_id,
    ))->fetchField();

  if (!empty($result)) {

    return $result;
  } else {

    return FALSE;
  }
}
