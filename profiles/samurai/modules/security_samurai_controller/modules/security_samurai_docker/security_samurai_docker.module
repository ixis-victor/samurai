<?php
/**
 * @file
 * security_samurai_docker.module
 */

/**
 * Implements hook_entity_info()
 */
function security_samurai_docker_entity_info() {

  $entity = array();

  // The entity info for the docker_container entity type.
  $entity['docker_containers'] = array(
    'label' => t('Environment'),
    'base table' => 'securitysamurai_dockercontainers',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'container_name',
    ),
    'uri callback' => 'entity_class_uri',
    'entity class' => 'DockerContainersEntity',
    'controller class' => 'DockerContainersEntityController',
    'admin ui' => array(
      'path' => 'jobs/environments/config',
      'controller class' => 'EntityDefaultUIController',
      'menu wildcard' => '%docker_containers',
      'file' => 'security_samurai_docker_container.inc',
     ),
    'module' => 'security_samurai_docker',
    'access callback' => 'security_samurai_docker_containers_access_callback',
    // Default views support.
    'views controller class' => 'EntityDefaultViewsController',
  );

  // The entity info for the docker_image entity type.
  $entity['docker_image'] = array(
    'label' => t('Image'),
    'base table' => 'securitysamurai_dockerimages',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'image_name',
    ),
    'uri callback' => 'entity_class_uri',
    'entity class' => 'DockerImagesEntity',
    'controller class' => 'DockerImagesEntityController',
    'admin ui' => array(
      'path' => 'jobs/images/config',
      'controller class' => 'EntityDefaultUIController',
      'menu wildcard' => '%docker_images',
      'file' => 'security_samurai_docker_image.inc',
    ),
    'module' => 'security_samurai_docker',
    'access callback' => 'security_samurai_docker_images_access_callback',
    // Default views support.
    'views controller class' => 'EntityDefaultViewsController',
  );

  return $entity;
}

function security_samurai_docker_entity_property_info() {

  $info = array();

  // Define type, label and description for each of the
  // docker_containers entity fields
  $info['docker_containers']['properties'] = array(
    'id' => array(
      'type' => 'integer',
      'label' => t('ID'),
      'description' => t('The unique ID of the docker_containers entity'),
      'schema field' => 'id',
    ),
    'associated_site_id' => array(
      'type' => 'client_site',
      'label' => t('Associated site ID'),
      'description' => t('The site ID of the site that is set up in the docker environment'),
      'schema field' => 'associated_site_id',
    ),
    'container_id' => array(
      'type' => 'text',
      'label' => t('Environment ID'),
      'description' => t('Unique container ID, generated by Docker'),
      'schema field' => 'container_id',
    ),
    'container_name' => array(
      'type' => 'text',
      'label' => t('Environment name'),
      'description' => t('A short description describing the use of the environment'),
      'schema field' => 'container_name',
    ),
    'container_description' => array(
      'type' => 'text',
      'label' => t('Environment description'),
      'description' => t('A short description about the environment'),
      'schema field' => 'container_description',
    ),
    'container_branch' => array(
      'type' => 'text',
      'label' => t('Environment branch'),
      'description' => t('The branch that is cloned in the environment'),
      'schema field' => 'container_branch',
    ),
    'image_name' => array(
      'type' => 'text',
      'label' => t('Image name'),
      'description' => t('The base image the environment is built with'),
      'schema field' => 'image_name',
    ),
    'assigned_ports' => array(
      'type' => 'text',
      'label' => t('Assigned ports'),
      'description' => t('The ports the environment has assigned'),
      'schema field' => 'assigned_ports',
    ),
    'status' => array(
      'type' => 'text',
      'label' => t('Status'),
      'description' => t('The status of the environment - 1 means the environment is active, 0 means the environment is inactive'),
      'schema field' => 'status',
    ),
    'creation_date' => array(
      'type' => 'date',
      'label' => t('Creation date'),
      'description' => t('The date the environment was created'),
      'schema field' => 'creation_date',
    ),
    'build_log' => array(
      'type' => 'text',
      'label' => t('Build log'),
      'description' => t('The output log of the creation of the environment'),
      'schema field' => 'build_log',
    ),
  );

  return $info;
}

/**
 * Implements hook_permission()
 */
function security_samurai_docker_permission() {

  // Return the security samurai docker permissions
  return array(
    'administer security samurai docker' => array(
      'title' => t('Administer configurable values for security samurai docker'),
      'description' => t('Overrides the \'Create docker *\' and \'View docker *\' permissions.'),
    ),
    'create security samurai docker images' => array(
      'title' => t('Create docker images'),
    ),
    'create security samurai docker containers' => array(
      'title' => t('Create docker environments'),
    ),
    'view security samurai docker images' => array(
      'title' => t('View docker image'),
    ),
    'view security samurai docker containers' => array(
      'title' => t('View docker environments'),
    ),
  );
}

/**
 * Access callback for viewing docker image history and configuration
 */
function security_samurai_docker_images_access_callback($op, $docker_image = NULL, $account = NULL) {

  // Return TRUE if user has administration permission
  if (user_access('administer security samurai docker')) {
    return TRUE;
  }

  // Check if user has access to view the Docker images
  if ($op == 'view security samurai docker images' && user_access('view security samurai docker images')) {
    return TRUE;
  }

  // Check if user has access to create a Docker image
  if ($op == 'create' && user_access('create security samurai docker images')) {
    return TRUE;
  } else {
    return FALSE;
  }
}

/**
 * Access callback for viewing docker container history and configuration
 */
function security_samurai_docker_containers_access_callback($op, $docker_containers = NULL,$account = NULL) {

  // Return TRUE if user has administration permission
  if (user_access('administer security samurai docker')) {
    return TRUE;
  }

  // Check if user has access to view the Docker containers
  if ($op == 'view security samurai docker containers' && user_access('view security samurai docker containers')) {
    return TRUE;
  }

  // Check if user has access to create a Docker container
  if ($op == 'create' && user_access('create security samurai docker containers')) {
    return TRUE;
  } else {
    return FALSE;
  }

}

/**
 * Implements hook_menu()
 */
function security_samurai_docker_menu() {
  $items = array();

  // Docker administration configuration page.
  $items['admin/config/development/docker'] = array(
    'title' => t('Docker configuration'),
    'description' => 'Configuration settings related to docker container setups.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('security_samurai_docker_admin_config_form'),
    'access arguments' => array('administer security samurai docker'),
    'file' => 'security_samurai_docker.admin.inc',
  );

  // Docker containers view entity pages
  $items['jobs/environments/%docker_containers'] = array(
    'title' => t('Docker container'),
    'page callback' => 'security_samurai_docker_container_view_entity',
    'page arguments' => array(2),
    'access callback' => 'security_samurai_docker_containers_access_callback',
    'access arguments' => array('view security samurai docker containers'),
  );

  // Docker images view entity pages
  $items['jobs/image/%docker_images'] = array(
    'title' => t('Docker image'),
    'page callback' => 'security_samurai_docker_image_view_entity',
    'page arguments' => array(2),
    'access callback' => 'security_samurai_docker_images_access_callback',
    'access arguments' => array('view security samurai docker images'),
  );

  // Ajax callback for creating images
  $items['ajax/remote/image/%'] = array(
    'title' => t('Image creation'),
    'page callback' => 'security_samurai_docker_build_image_ajax',
    'page arguments' => array(3),
    'access arguments' => array('administer security samurai docker images'),
    'type' => MENU_CALLBACK,
  );

  // Ajax callback for creating environments
  $items['ajax/remote/environment'] = array(
    'title' => t('Environment creation'),
    'page callback' => 'security_samurai_docker_build_environment_ajax',
    'access arguments' => array('administer security samurai docker containers'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Ajax callback
 *
 * Creates a docker container
 */
function security_samurai_docker_build_environment_ajax() {

  $commands = array();
  $selector = '#samurai-remote-wrapper';

  $container_information = variable_get('samurai_container_temp_information', NULL);

  if (!is_null($container_information)) {

    // Check what ports in the port range are currently available.
    // Port range will start from 3000.
    $max_active_containers = variable_get('samurai_docker_max_active_containers', 0);

    if (samurai_docker_get_active_containers() >= $max_active_containers) {

      // No environments available. All are being used.
      $html = '<pre>' . t('All environments are currently in use.') . '</pre>';
      $html .= '<pre>' . t('You can either stop an active environment or raise the number of maximum active containers.') . '</pre>';
    } else {

      // Retrieve a free port available for use
      $available_port = samurai_docker_get_available_port();

      // Update the samurai_docker_ports variable with the new used port
      $docker_ports = variable_get('samurai_docker_ports', NULL);
      if (!is_null($docker_ports)) {

        $docker_ports[$available_port] = TRUE;
        variable_set('samurai_docker_ports', $docker_ports);
      } else {

        $docker_ports = array();
        $docker_ports[$available_port] = TRUE;
        variable_set('samurai_docker_ports', $docker_ports);
      }

      // Retieve a free port available for use
      $available_port_2 = samurai_docker_get_available_port();

      $docker_ports = variable_get('samurai_docker_ports', NULL);
      if (!is_null($docker_ports)) {

        // The newly retrieved port is now in use.
        $docker_ports[$available_port_2] = TRUE;
        variable_set('samurai_docker_ports', $docker_ports);
      }

      $port_configuration = array();
      $entity_port_configuration = array();

      // Append ':80' on to the end of the available_port int
      $port_configuration[] = $available_port . ':80';
      $entity_port_configuration['80'] = $available_port;

      // Append ':22' on to the end of the available_port_2 int
      $port_configuration[] = $available_port_2 . ':22';
      $entity_port_configuration['22'] = $available_port_2;

      // Encode the forwarded ports for database storage
      $json_encoded_ports = drupal_json_encode($entity_port_configuration);

      // Init docker and run the create container command
      $docker = new Docker();
      $docker->create_container($port_configuration, $container_information['image']);

      // - Start apache on the container
      // - Restart the SSH service
      $docker->execute_command('service apache2 start');
      $docker->execute_command('service ssh restart');

      // Set the private SSH key of the container
      $private_ssh_key = variable_get('samurai_gitapi_privkey', NULL);
      if (!is_null($private_ssh_key)) {

        // Add the ssh key to the container
        $docker->execute_command('bash -c "echo -e \'' .  decrypt($private_ssh_key) . '\' > /root/.ssh/id_rsa"');
      }

      // Prepare the environment for repository clone


      // Use drush aliases to sync a database


      // Create a new docker container entity and save it
      $container = entity_create('docker_containers', array(
        'associated_site_id' => $container_information['site_id'],
        'container_id' => $docker->container_id,
        'container_name' => $container_information['name'],
        'container_description' => $container_information['description'],
        'container_branch' => $container_information['branch'],
        'image_name' => $docker->image_name,
        'assigned_ports' => $json_encoded_ports,
        'status' => 1,
        'creation_date' => REQUEST_TIME,
      ));
      $container_wrapper = entity_metadata_wrapper('docker_containers', $container);
      $container_wrapper->save();

      // Create a link between the new container and an existing site
      $container_id = samurai_docker_get_container_row_id($docker->container_id);
      $image_id = samurai_docker_get_image_row_id($docker->image_name);
      $site_id = $container_information['site_id'];
      $branch = $container_information['branch'];

      samurai_docker_create_dockersite_link($container_id, $site_id, $image_id, $branch);

      // Success message
      $html = '<pre>' . t('Environment has been created') . '</pre>';
      $html .= t('You will be redirected to a page that will allow you to manage this environment upon submission of this form.');
      $html .= '<script type="text/javascript">(function ($) {$("#edit-submit").css({"display":"block"});})(jQuery);</script>';

      // Set the temp variable to NULL
      variable_set('samurai_contaier_temp_information', NULL);
    }

  } else {

    // No environments available
    $html = '<pre>' . t('No environment information specified') . '</pre>';
  }

  // Insert new requested content
  $commands[] = ajax_command_html($selector, $html);

  print ajax_render($commands);
  drupal_exit();
}

/**
 * Ajax callback
 *
 * Creates a docker image
 */
function security_samurai_docker_build_image_ajax($image_name) {

  $commands = array();
  $selector = '#samurai-remote-wrapper';

  $image_created = variable_get('samurai_' . $image_name . '_image_created', NULL);
  $image_dockerfile_location = variable_get('samurai_' . $image_name . '_dockerfile_location', NULL);

  // Check if the image_name image created Drupal variable exists.
  if (is_null($image_created) && !is_null($image_dockerfile_location)) {

    // Init docker and run the create image command.
    $docker = new Docker();
    $image_id = $docker->create_image($image_name, $image_dockerfile_location);

    // If the image was created successfully, a 12 character string is returned.
    if (strlen($image_id) > 12 || strlen($image_id) < 12) {

      // Presume image was not created successfully.
      $html = '<pre>The image creation process has failed. Here is the output received: ' . $image_id . '</pre>';
      $html .= '<p>Click the above text to restart the image creation process or create the image manually.</p>';

    } else {

      // Add the docker_image entity
      $docker_default_image = entity_create('docker_image', array(
        'image_name' => $image_name,
        'image_id' => $image_id,
        'creation_date' => REQUEST_TIME,
      ));
      $image_wrapper = entity_metadata_wrapper('docker_image', $docker_default_image);
      $image_wrapper->save();

      // Output for the user
      $html = '<pre>Image has been created: ' . $image_id . '</pre>';
      $html .= '<script type="text/javascript">(function ($) {$("#edit-submit").css({"display":"block"});})(jQuery);</script>';

      // The image has been created successfully.
      variable_set('samurai_' . $image_name . '_image_created', TRUE);
    }
  } else {

    $html = '<pre>Image has already been created</pre>';
  }

  // Insert new requested content
  $commands[] = ajax_command_html($selector, $html);

  print ajax_render($commands);
  drupal_exit();
}

/**
 * Return an available port
 */
function samurai_docker_get_available_port() {

  // Make sure available_port is within scope
  $available_port = NULL;

  // Retrieve the array of ports currently in use
  $samurai_docker_ports = variable_get('samurai_docker_ports', NULL);

  // Create an array 3000 -- 3100.
  $port_range = range(3000, 3100);

  // Ideally the lowest port number would be best,
  // so the possible range is kept as low as possible
  foreach ($port_range as $key => $value) {

    // Check if the port is already in use by
    // crossreferencing samurai_docker_ports
    if (empty($samurai_docker_ports[$value])) {

      // The docker port is not currently in use
      $available_port = $value;

      // Break out of foreach
      break;
    }
  }

  if (!is_null($available_port)) {

    // Port is availalble
    return $available_port;
  } else {

    // No ports available
    return NULL;
  }
}

/**
 * Update the samurai_docker_ports variable, removing ports that are no longer used.
 *
 * @param array[mixed] $assigned_ports The ports a docker_containers entity has been assigned
 */
function samurai_docker_free_up_ports($assigned_ports) {

  // Retrieve the array of ports currently in use
  $samurai_docker_ports = variable_get('samurai_docker_ports', NULL);

  if (!is_null($samurai_docker_ports)) {

    // Unset each docker ports entry that matches the assigned_ports values
    foreach ($assigned_ports as $key => $value) {
      unset($samurai_docker_ports[$value]);
    }

    // Set the samurai_docker_ports variable
    variable_set('samurai_docker_ports', $samurai_docker_ports);
  }
}

/**
 * Returns the number of active containers
 */
function samurai_docker_get_active_containers() {

  // Perform the query
  $result = db_query('SELECT container_id FROM {securitysamurai_dockercontainers}
    WHERE status = 1')->fetchAll();

  // Loop through results adding 1 to $count each loop
  $count = 0;
  foreach ($result as $key => $value) {
    $count++;
  }

  // Return the result
  return $count;
}

/**
 * Returns true or false whether a container is active or not
 *
 * @param int $container_id The ID of the docker_containers entity
 */
function samurai_docker_container_is_active($container_id) {

  // Execute the query
  $result = db_query('SELECT status FROM {securitysamurai_dockercontainers}
    WHERE id = :container_id', array(
      ':container_id' => $container_id,
    ))->fetchField();

  // Return true or false depending on the value of $result.
  if ($result == 0) {
    return FALSE;
  } else {
    return TRUE;
  }
}

/**
 * Returns the ID for a docker container
 *
 * @param string $container_id The unique ID generated by Docker
 */
function samurai_docker_get_container_row_id($container_id) {

  // Execute the query
  $result = db_query('SELECT id FROM {securitysamurai_dockercontainers}
    WHERE container_id = :container_id', array(
      ':container_id' => $container_id,
    ))->fetchField();

  // Return the result
  return $result;
}

/**
 * Returns the ID for docker image
 *
 * @param string $image_name The name of the image
 */
function samurai_docker_get_image_row_id($image_name) {

  // Execute the query
  $result = db_query('SELECT id FROM {securitysamurai_dockerimages}
    WHERE image_name = :image_name', array(
      ':image_name' => $image_name,
    ))->fetchField();

  // Return the result
  return $result;
}

/**
 * Returns an absolute URL for accessing the container
 *
 * @param int $container_id The ID of the docker_containers entity.
 */
function samurai_docker_get_accessible_url($container_id) {

  // Retrieve the assigned ports from the database
  $result = db_query('SELECT assigned_ports FROM {securitysamurai_dockercontainers}
    WHERE id = :container_id', array(
      ':container_id' => $container_id,
    ))->fetchField();

  if (!empty($result)) {

    // Construct the URL.
    $assigned_ports = drupal_json_decode($result);
    return $GLOBALS['base_url'] . ':' . $assigned_ports['80'];
  }
}

/**
 * Insert a row into the securitysamurai_dockersites table
 * Easily link between the entities.
 *
 * @param int $site_id The ID of the site (securitysamurai_site)
 * @param int $container_id The ID of the container (securitysamurai_dockercontainers)
 * @param int $image_id The ID of the image (securitysamurai_dockerimages)
 * @param string $branch_name The name of the branch
 */
function samurai_docker_create_dockersite_link($container_id, $site_id, $image_id, $branch_name) {

  // Insert the values in the securitysamurai_dockersites table
  db_insert('securitysamurai_dockersites')
    ->fields(array(
      'container_id' => $container_id,
      'image_id' => $image_id,
      'site_id' => $site_id,
      'branch' => $branch_name
    ))
    ->execute();
}

/**
 * Client form step 2
 */
function client_site_form_step_2($form, $form_state) {

  // Container for the docker elements
  $form['docker_fieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Docker configuration'),
    '#description' => t('Docker is used for creating test environments when applying the security updates.
      The below configuration options are custom to this client.'),
    '#collapsed' => FALSE,
    '#fieldset_icon' => 'cloud',
  );
  // Select PHP version to run.
  $form['docker_fieldset']['docker_chosenos'] = array(
    '#type' => 'select',
    '#title' => t('Docker container OS'),
    '#description' => t('What operating system would you like the Docker container to use?'),
    '#options' => array(
      'ubuntu-14.04',
    ),
  );
  // Select docker PHP version
  if (isset($form_state['values']['docker_phpversion'])) {
    $phpversion_default = $form_state['values']['docker_phpversion'];
  } elseif (isset($docker->phpversion)) {
    // Placeholder, will eventually be filled.
  } else {
    $phpversion_default = '';
  }
  $form['docker_fieldset']['docker_phpversion'] = array(
    '#type' => 'select',
    '#title' => t('Docker container PHP version'),
    '#description' => t('What PHP version would you like the Docker container to install when running your site?'),
    '#default_value' => $phpversion_default,
    '#options' => array(
      0 => '- Please select one -',
      1 => 'PHP 5.5 latest',
      2 => 'PHP 5.4 latest',
      3 => 'PHP 5.3 latest',
    ),
  );
  // Select the docker image to use
  if (isset($form_state['values']['docker_chosenimage'])) {
    $chosenimage_default = $form_state['values']['docker_chosenimage'];
  } elseif (isset($docker->chosenimage)) {
    // Placeholder, will eventually be filled.
  } else {
    $chosenimage_default = '';
  }
  $form['docker_fieldset']['docker_chosenimage'] = array(
    '#type' => 'select',
    '#title' => t('Docker image to use'),
    '#description' => t('What docker image would you like the Docker container to use when running your site?'),
    '#default_value' => $chosenimage_default,
    '#options' => array(
      0 => 'default',
    ),
  );
  // Form back button.
  $form['form_back'] = array(
    '#type' => 'submit',
    '#value' => 'Back',
  );
  // Form next button.
  $form['form_next'] = array(
    '#type' => 'submit',
    '#value' => 'Next',
  );

  // Return the form components.
  return $form;
}

/**
 * Form validation handler for the Docker step of the client_site_form
 */
function client_site_form_step_2_validate($form, $form_state) {

  // Check the docker PHP version is selected.
  if ($form_state['values']['docker_phpversion'] == 0) {
    return form_set_error('docker_phpversion', t('Select a PHP version'));
  }
}

/**
 * Form submit handler for the Docker step of the client_site_form
 */
function client_site_form_submit_details_step_2($form_id, $form_state) {

  // Submit the details
  // TODO
}

/**
 * Returns a form array for docker container actions
 */
function samurai_docker_container_actions_form($form, &$form_state) {

  $form = array();

  if (samurai_docker_container_is_active(arg(2))) {
    $form['stop_container'] = array(
      '#type' => 'submit',
      '#value' => t('Stop environment'),
      '#op' => 'stop',
      '#attributes' => array(
        'style' => array('width: 100%'),
      ),
    );
    $form['delete_container'] = array(
      '#type' => 'submit',
      '#value' => t('Delete environment'),
      '#op' => 'delete',
      '#attributes' => array(
        'style' => array('width: 100%'),
        'class' => array('disabled'),
        'disabled' => array('disabled'),
      ),
    );
  } else {
    $form['start_container'] = array(
      '#type' => 'submit',
      '#value' => t('Start environment'),
      '#op' => 'start',
      '#attributes' => array(
        'style' => array('width: 100%'),
      ),
    );
    $form['delete_container'] = array(
      '#type' => 'submit',
      '#value' => t('Delete environment'),
      '#op' => 'delete',
      '#attributes' => array(
        'style' => array('width: 100%'),
      ),
    );
  }

  $form['export_container'] = array(
    '#type' => 'submit',
    '#value' => t('Export environment'),
    '#op' => 'export',
    '#attributes' => array(
      'class' => array('disabled'),
      'disabled' => array('disabled'),
      'style' => array('width: 100%'),
    ),
  );

  return $form;
}

/**
 * Form handler for samurai_docker_container_actions_form()
 */
function samurai_docker_container_actions_form_submit($form, $form_state) {

  // Initialise new docker
  $docker = new Docker();

  // Load the current docker entity
  $container = docker_containers_load(arg(2));

  switch ($form_state['triggering_element']['#op']) {
    case 'stop':

      // Stop the container
      $docker->stop_container($container->container_id);

      // - Update container status
      // - Save the updated docker_containers entity
      $container->status = 0;
      $container->save();
      break;
    case 'delete':

      // Delete the container
      $docker->delete_container($container->container_id);

      // Delete the docker containers entity.
      entity_delete('docker_containers', $container->id);

      // Update the docker ports array
      samurai_docker_free_up_ports(drupal_json_decode($container->assigned_ports));

      // Redirect to a safe place after the environment has been deleted.
      drupal_goto('jobs');
      break;
    case 'start':

      // Start the container
      $docker->start_container($container->container_id);

      // - Start apache2
      // - Restart the SSH service
      $docker->execute_command('service apache2 start', $container->container_id);
      $docker->execute_command('service ssh restart', $container->container_id);

      // - Update the container status
      // - Save the updated docker_containers entity
      $container->status = 1;
      $container->save();
      break;
    case 'export':

      // Export the container

      break;
  }
}

/**
 * Extends the default entity class for the 'project' entity type.
 */
class DockerContainersEntity extends Entity {

  protected function defaultUri() {

    return array('path' => 'jobs/environments/' . $this->identifier());
  }
}

/**
 * Extends the EntityAPIController class for the 'project' entity type
 *
 * @method object buildContent()
 */
class DockerContainersEntityController extends EntityAPIController {

  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {

    $build = parent::buildContent($entity, $view_mode, $langcode, $content);
    return $build;
  }
}

/**
 * Implements hook_load
 *
 * Menu autoloader for project entities.
 */
function docker_containers_load($id) {

  $docker_entity = entity_load('docker_containers', array($id));
  return array_pop($docker_entity);
}

/**
 * Load the entity of type docker_container.
 */
function security_samurai_docker_container_view_entity($entity, $view_mode = 'full') {

    $entity_type = $entity->entityType();
    $entity_id = entity_id($entity_type, $entity);
    $entity->content = array();
    $entity->title = filter_xss($entity->container_name);
    field_attach_prepare_view($entity_type, array($entity_id => $entity), $view_mode);
    entity_prepare_view($entity_type, array($entity_id => $entity));
    $entity->content += field_attach_view($entity_type, $entity, $view_mode);
    $entity->content += array(
      '#theme'     => $entity_type,
      '#element'   => $entity,
      '#view_mode' => $view_mode,
      '#language'  => LANGUAGE_NONE,
    );

    drupal_set_title($entity->title);

    return $entity->content;
}

/**
 * Extends the default entity class for the 'project' entity type.
 */
class DockerImagesEntity extends Entity {

  protected function defaultUri() {

    return array('path' => 'jobs/image/' . $this->identifier());
  }
}

/**
 * Extends the EntityAPIController class for the 'project' entity type
 *
 * @method object buildContent()
 */
class DockerImagesEntityController extends EntityAPIController {

  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {

    $build = parent::buildContent($entity, $view_mode, $langcode, $content);
    return $build;
  }
}

/**
 * Implements hook_load
 *
 * Menu autoloader for project entities.
 */
function docker_image_load($id) {

  $docker_entity = entity_load('docker_containers', array($id));
  return array_pop($docker_entity);
}

/**
 * Load the entity of type docker_image.
 */
function security_samurai_docker_images_view_entity($entity, $view_mode = 'full') {

    $entity_type = $entity->entityType();
    $entity_id = entity_id($entity_type, $entity);
    $entity->content = array();
    $entity->title = filter_xss($entity->name);
    field_attach_prepare_view($entity_type, array($entity_id => $entity), $view_mode);
    entity_prepare_view($entity_type, array($entity_id => $entity));
    $entity->content += field_attach_view($entity_type, $entity, $view_mode);
    $entity->content += array(
      '#theme'     => $entity_type,
      '#element'   => $entity,
      '#view_mode' => $view_mode,
      '#language'  => LANGUAGE_NONE,
    );

    return $entity->content;
}
