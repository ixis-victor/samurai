<?php
/**
 * @file
 * security_samurai_controller.module
 *
 * @author jkswoods
 */

/**
 * @global string SAMURAI_MODULE_PATH
 * Define the path of the security_samurai module.
 *
 * @global string SAMURAI_ORG_UPDATE_URL
 * Define the release history URL for gathering project releases.
 *
 * @global string SAMURAI_ORG_SA_CORE
 * Define the core project security update feed URL.
 *
 * @global string SAMURAI_ORG_SA_CONTRIB
 * Define the contributed projects security update feed URL.
 */
define('SAMURAI_MODULE_PATH', drupal_get_path('module', 'security_samurai_controller'));
define('SAMURAI_ORG_UPDATE_URL', 'http://updates.drupal.org/release-history/');
define('SAMURAI_ORG_SA_CORE', 'https://www.drupal.org/security/rss.xml');
define('SAMURAI_ORG_SA_CONTRIB', 'https://www.drupal.org/security/contrib/rss.xml');

// -- Include the helper functions to this module.
// -- Include the cron/fetch related functions etc.
include(SAMURAI_MODULE_PATH . '/security_samurai_controller.inc');
include(SAMURAI_MODULE_PATH . '/security_samurai_controller.fetch.inc');

/**
 * Implements hook_entity_info()
 */
function security_samurai_controller_entity_info() {

  $info = array();

  // The site entity.
  $info['client_site'] = array(
    'label' => t('Site'),
    'base table' => 'securitysamurai_site',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'name',
    ),
    'uri callback' => 'entity_class_uri',
    'entity class' => 'ClientSiteEntity',
    'controller class' => 'ClientSiteEntityController',
    'admin ui' => array(
       'path' => 'client-site/config',
       'controller class' => 'EntityDefaultUIController',
       'menu wildcard' => '%client_site',
       'file' => 'security_samurai_controller.admin.inc',
     ),
    'module' => 'security_samurai_controller',
    'access callback' => 'security_samurai_controller_access_callback',
    // Default views support.
    'views controller class' => 'EntityDefaultViewsController',
  );

  // The security announcement entity.
  $info['security_announcement'] = array(
    'label' => t('Security announcement'),
    'base table' => 'securitysamurai_sa',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'sa_id',
    ),
    'uri callback' => 'entity_class_uri',
    'entity class' => 'SAEntity',
    'controller class' => 'SAEntityController',
    'module' => 'security_samurai_controller',
    'access callback' => 'security_samurai_controller_access_callback',
    // Default views support.
    'views controller class' => 'EntityDefaultViewsController',
  );

  // The project entity.
  $info['project'] = array(
    'label' => t('Project'),
    'base table' => 'securitysamurai_projects',
    'entity keys' => array(
      'id' => 'id',
      'label' => 'name',
    ),
    'uri callback' => 'entity_class_uri',
    'entity class' => 'ProjectEntity',
    'controller class' => 'ProjectEntityController',
    'module' => 'security_samurai_controller',
    'access callback' => 'security_samurai_controller_access_callback',
  );

  return $info;
}

/**
 * Implements hook_entity_property_info()
 */
function security_samurai_controller_entity_property_info() {

  $info = array();

  // Define type, label and description for each of the
  // client_site entity fields
  $info['client_site']['properties'] = array(

    'id' => array(
      'type' => 'integer',
      'label' => t('ID'),
      'description' => t('The unique ID number of a site.'),
      'schema field' => 'id',
    ),
    'name' => array(
      'type' => 'text',
      'label' => t('Name'),
      'description' => t('The name of the site.'),
      'schema field' => 'name',
    ),
    'encryption_key' => array(
      'type' => 'text',
      'label' => t('Encryption key'),
      'description' => t('The encryption key used for decrypting the site\'s update data.'),
      'schema field' => 'encryption_key',
    ),
    'site_url' => array(
      'type' => 'uri',
      'label' => t('URL'),
      'description' => t('The URL of site.'),
      'schema field' => 'site_url',
    ),
    'created_at' => array(
      'type' => 'date',
      'label' => t('Created at'),
      'description' => t('The timestamp of when the site entity was added to Security samurai'),
      'schema field' => 'created_at',
    ),
    'updated_at' => array(
      'type' => 'date',
      'label' => t('Updated at'),
      'description' => t('The timestamp of when the site entity was updated on Security samurai'),
      'schema field' => 'updated_at',
    ),
    'site_update_data' => array(
      'type' => 'text',
      'label' => t('Update data'),
      'description' => t('The last received module, theme and core version data.'),
      'schema field' => 'site_update_data',
    ),
    'update_count' => array(
      'type' => 'integer',
      'label' => t('Update count'),
      'description' => t('The number of modules on the site that have an update available.'),
      'schema field' => 'update_count',
    ),
    'update_next_check' => array(
      'type' => 'date',
      'label' => t('Next update check'),
      'description' => t('The next time an updated version of the \'Update data\' will be retrieved from the site'),
      'schema field' => 'update_next_check',
    ),
    'core_version' => array(
      'type' => 'text',
      'label' => t('Core major version'),
      'description' => t('The core major version e.g. 7.x'),
      'schema field' => 'core_version',
    ),
    'site_alias_name' => array(
      'type' => 'text',
      'label' => t('Site alias name'),
      'description' => t('The site alias name, human-readable.'),
      'schema field' => 'site_alias_name',
    ),
    'site_alias_id' => array(
      'type' => 'integer',
      'label' => t('Site alias ID'),
      'description' => t('The site alias unique ID'),
      'schema field' => 'site_alias_id',
    ),
  );

  // Define type, label and description for each of the
  // security_announcement entity fields
  $info['security_announcement']['properties'] = array(

    'id' => array(
      'type' => 'integer',
      'label' => t('ID'),
      'description' => t('The unique ID number of the security announcement.'),
      'schema field' => 'id',
    ),
    'sa_id' => array(
      'type' => 'text',
      'label' => t('SA ID'),
      'description' => t('The security announcement ID, issued on Drupal.org.'),
      'schema field' => 'sa_id',
    ),
    'risk_level' => array(
      'type' => 'text',
      'label' => t('Risk level'),
      'description' => t('The risk level, includes risk information.'),
      'schema field' => 'risk_level',
    ),
    'date' => array(
      'type' => 'date',
      'label' => t('Issue date'),
      'description' => t('The issue date of the security announcement.'),
      'schema field' => 'date',
    ),
    'version' => array(
      'type' => 'text',
      'label' => t('Core version'),
      'description' => t('Compatible core versions, JSON formatted.'),
      'schema field' => 'version',
    ),
    'vulnerability' => array(
      'type' => 'text',
      'label' => t('Vulnerability'),
      'description' => t('The vulnerability description.'),
      'schema field' => 'vulnerability',
    ),
    'solution' => array(
      'type' => 'text',
      'label' => t('Solution'),
      'description' => t('The solution to fix the vulnerability.'),
      'schema field' => 'solution',
    ),
    'project_name' => array(
      'type' => 'text',
      'label' => t('Affected project'),
      'description' => t('The name of the project affected by the vulnerabilty.'),
      'schema field' => 'project_name',
    ),
  );

  return $info;
}

/**
 * Implements hook_menu()
 */
function security_samurai_controller_menu() {

  $items = array();

  // For entities of type 'site'
  $items['client-site/%client_site'] = array(
    'title' => t('Site'),
    'page callback' => 'security_samurai_controller_site_view_entity',
    'page arguments' => array(1),
    'access callback' => 'security_samurai_controller_access_callback',
    'access arguments' => array('view security samurai site'),
  );

  // For entities of type 'security_announcement'
  $items['security-announcement/%security_announcement'] = array(
    'title' => t('Security announcement'),
    'page callback' => 'security_samurai_controller_security_announcement_view_entity',
    'page arguments' => array(1),
    'access callback' => 'security_samurai_controller_access_callback',
    'access arguments' => array('view security samurai sa'),
  );

  // Return the menu items
  return $items;
}

/**
 * Implements hook_permission()
 */
function security_samurai_controller_permission() {

  // Return the security samurai controller permissions.
  return array(
    'administer security samurai controller' => array(
      'title' => t('Administer security samurai controller'),
    ),
    'create security samurai site' => array(
      'title' => t('Add a site'),
      'description' => t('Grants ability to add site to security samurai.'),
    ),
    'view security samurai site' => array(
      'title' => t('View sites'),
      'description' => t('Grants ability to view the update status of added sites.'),
    ),
    'view security samurai sa' => array(
      'title' => t('View security announcements'),
      'description' => t('Grants ability to view the security announcements in Samurai.'),
    ),
  );
}

/**
 * Access callback for viewing the sites nodes.
 */
function security_samurai_controller_access_callback($op, $site_entity = NULL, $account = NULL) {

  // Return TRUE if user has administration permission
  if (user_access('administer security samurai controller')) {
    return TRUE;
  }

  // Check if user has access to view a site
  if ($op == 'view security samurai site' && user_access('view security samurai site')) {
    return TRUE;
  }

  // Check if user has access to view a security announcement
  if ($op == 'view security samurai sa' && user_access('view security samurai sa')) {
    return TRUE;
  }

  // Check if user has access to add a new client_site Entity
  if (($op == 'create' || $op == 'view' || $op == 'update') && user_access('create security samurai site')) {
    return TRUE;
  } else {
    return FALSE;
  }
}

/**
 * Returns an array of form elements
 */
function security_samurai_controller_site_actions_form($form, &$form_state) {

  $form = array();

  // Scans the site for new projects
  $form['scan_site_now'] = array(
    '#type' => 'submit',
    '#value' => t('Scan the site now'),
    '#op' => 'scan_site',
    '#attributes' => array(
      'style' => array('width: 100%;')
    ),
  );
  // Will redirect to the site edit page
  $form['edit_site'] = array(
    '#type' => 'submit',
    '#value' => t('Edit site'),
    '#op' => 'edit_site',
    '#attributes' => array(
      'style' => array('width: 49%;', 'float: right;')
    ),
  );
  // Remove the site entity and any related containers/images/entities
  $form['delete_site'] = array(
    '#type' => 'submit',
    '#value' => t('Delete site'),
    '#op' => 'delete_site',
    '#disabled' => TRUE,
    '#attributes' => array(
      'style' => array('width: 49%;', 'float: left;'),
      'disabled' => array('disabled'),
    ),
  );

  return $form;
}

/**
 * Form submit handler
 * @see security_samurai_controller_site_actions_form
 */
function security_samurai_controller_site_actions_form_submit($form, $form_state) {

  // Check the op of the selected button
  switch ($form_state['triggering_element']['#op']) {
    case 'scan_site':
      $site = client_site_load(arg(1));

      // Scan the site
      if ($site->update_check_method == 1) {

        // -- Get the update data from the site.
        // -- Decode the json encoded update data, to use as a PHP array.
        // -- Decrypt the update data.
        $encoded_update_data = samurai_get_site_update_data($site->site_url);
        $encrypted_update_data = drupal_json_decode($encoded_update_data);
        $decrypted_update_data = drupal_json_decode(
        trim(samurai_decrypt_update_data(
          $encrypted_update_data['encrypted'],
          $site->encryption_key)));

        // Assign values to the loaded entity
        $site->site_update_data = drupal_json_encode(samurai_process_update_data(array_reverse($decrypted_update_data)));
        $site->update_count = samurai_count_available_security_updates(drupal_json_decode($site->site_update_data));
        $site->update_next_check = strtotime(variable_get('security_samurai_controller_site_check_interval', '12 hours'));
        $site->core_version = samurai_get_site_core_major($site->name, $site->site_update_data);
      } elseif ($site->update_check_method == 2) {

        // Initialise a new SamuraiDocker object
        $aliases = new SamuraiAliases();

        // -- Get the update data from the site via drush (drush @alias pm-list)
        // -- Format the retrieved data into an array
        $unformatted_update_data = $aliases->invoke_process($site->site_alias_name, 'pm-list');
        $formatted_update_data = samurai_process_drush_update_data($unformatted_update_data['output']);

        // Assign values to the loaded entity
        $site->site_update_data = drupal_json_encode($formatted_update_data);
        $site->update_count = samurai_count_available_security_updates(drupal_json_decode($site->site_update_data));
        $site->update_next_check = strtotime(variable_get('security_samurai_controller_site_check_interval', '12 hours'));
        $site->core_version = samurai_get_site_core_major($site->name, $site->site_update_data);
      }

      // Save the entity
      entity_save('client_site', $site);

      break;
    case 'edit_site':
      drupal_goto('client-site/config/manage/' . arg(1));
      break;
  }
}

/**
 * Returns an array of form elements
 */
function security_samurai_controller_security_actions_form($form, &$form_state) {

  // Retrieve the site update count
  $update_count = smaurai_get_site_update_count(arg(1));
  if ($update_count > 0) {

    $form = array();

    $form['markup'] = array(
      '#type' => 'markup',
      '#markup' => t('It looks like there is pending security updates for this site, would you Samurai to secure this site?'),
    );

    $form['secure_the_site'] = array(
      '#type' => 'submit',
      '#value' => t('Secure the site'),
      '#op' => 'secure_site',
      '#attributes' => array(
        'style' => array('width: 100%;'),
      ),
    );

    return $form;
  }
}

/**
 * Form submit handler
 * @see security_samurai_controller_security_actions_form
 */
function security_samurai_controller_security_actions_form($form, $form_state) {

}

/**
 * Extends the default entity class for the 'site' entity type.
 */
class ClientSiteEntity extends Entity {
  /**
   * Override the default path for the 'site' entity type.
   */
  protected function defaultUri() {

    return array('path' => 'client-site/' . $this->identifier());
  }
}

/**
 * Extends the EntityAPIController class for the 'site' entity type
 *
 * @method object save()
 * @method object buildContent()
 */
class ClientSiteEntityController extends EntityAPIController {
  /**
   * Override the default save function
   */
  public function save($entity, DatabaseTransaction $transaction = NULL) {

    if (isset($entity->is_new)) {
      $entity->created_at = REQUEST_TIME;
    }
    $entity->updated_at = REQUEST_TIME;
    return parent::save($entity, $transaction);
  }

  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {

    $build = parent::buildContent($entity, $view_mode, $langcode, $content);
    return $build;
  }
}

/**
 * Implements hook_load
 *
 * Menu autoloader for site/%site
 */
function client_site_load($id) {

  $site = entity_load('client_site', array($id));
  return array_pop($site);
}

/**
 * Load the entity of type site.
 */
function security_samurai_controller_site_view_entity($entity, $view_mode = 'full') {

    $entity_type = $entity->entityType();
    $entity_id = entity_id($entity_type, $entity);
    $entity->content = array();
    $entity->title = filter_xss($entity->name);
    field_attach_prepare_view($entity_type, array($entity_id => $entity), $view_mode);
    entity_prepare_view($entity_type, array($entity_id => $entity));
    $entity->content += field_attach_view($entity_type, $entity, $view_mode);
    $entity->content += array(
      '#theme'     => $entity_type,
      '#element'   => $entity,
      '#view_mode' => $view_mode,
      '#language'  => LANGUAGE_NONE,
    );

    drupal_set_title($entity->title);

    return $entity->content;
}

/**
 * Extends the default entity class for the 'security_announcement' entity type.
 */
class SAEntity extends Entity {

  protected function defaultUri() {

    return array('path' => 'security-announcement/' . $this->identifier());
  }
}

/**
 * Extends the EntityAPIController class for the 'security_announcement' entity type
 *
 * @method object buildContent()
 */
class SAEntityController extends EntityAPIController {

  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {

    $build = parent::buildContent($entity, $view_mode, $langcode, $content);
    return $build;
  }
}

/**
 * Implements hook_load
 *
 * Menu autoloader for security_announcement entities.
 */
function security_announcement_load($id) {

  $sa_entity = entity_load('security_announcement', array($id));
  return array_pop($sa_entity);
}

/**
 * Load the entity of type Security announcement.
 */
function security_samurai_controller_security_announcement_view_entity($entity, $view_mode = 'full') {

  $entity_type = $entity->entityType();
  $entity_id = entity_id($entity_type, $entity);
  $entity->content = array();
  $entity->title = filter_xss($entity->sa_id);
  field_attach_prepare_view($entity_type, array($entity_id => $entity), $view_mode);
  entity_prepare_view($entity_type, array($entity_id => $entity));
  $entity->content += field_attach_view($entity_type, $entity, $view_mode);
  $entity->content += array(
    '#theme'     => $entity_type,
    '#element'   => $entity,
    '#view_mode' => $view_mode,
    '#language'  => LANGUAGE_NONE,
  );

  drupal_set_title($entity->title);

  return $entity->content;
}

/**
 * Extends the default entity class for the 'project' entity type.
 */
class ProjectEntity extends Entity {

  protected function defaultUri() {

    return array('path' => 'project/' . $this->identifier());
  }
}

/**
 * Extends the EntityAPIController class for the 'project' entity type
 *
 * @method object buildContent()
 */
class ProjectEntityController extends EntityAPIController {

  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {

    $build = parent::buildContent($entity, $view_mode, $langcode, $content);
    return $build;
  }
}

/**
 * Implements hook_load
 *
 * Menu autoloader for project entities.
 */
function project_load($id) {

  $project_entity = entity_load('project', array($id));
  return array_pop($project_entity);
}
